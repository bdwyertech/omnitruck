---
apiVersion: v1
kind: Namespace
metadata:
  name: <%= ENV['APP'] %>
---
apiVersion: v1
data:
  .dockerconfigjson: <%= ENV['DOCKER_CONFIG_JSON_CHEFOPS'] %>
kind: Secret
metadata:
  name: registry-secret
  namespace: <%= ENV['APP'] %>
type: kubernetes.io/dockerconfigjson
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    <%- if ENV['ENVIRONMENT'] == 'production' -%>
    service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-access-log-emit-interval: "60"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "chef-utility-kubernetes-elb-access-logs"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-prefix: "<%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>"
    <%- end -%>
    <%- if ENV.has_key?('AWS_SSL_ARN') -%>
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: <%= ENV['AWS_SSL_ARN'] %>
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    <%- end -%>
    dns.alpha.kubernetes.io/external: "<%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>.kubernetes.chef.co"
  labels:
    run: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
    dns: route53
  name: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
  namespace: <%= ENV['APP'] %>
spec:
  ports:
  <%- if ENV.has_key?('AWS_SSL_ARN') -%>
  - name: https
    port: 443
  <%- else -%>
  - name: http
    port: 80
    <%- end -%>
    protocol: TCP
    targetPort: 8000
  selector:
    run: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
  sessionAffinity: None
  type: LoadBalancer
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "2"
  labels:
    run: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
  name: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
  namespace: <%= ENV['APP'] %>
spec:
  replicas: <%= ENV['ENVIRONMENT'] == 'production' ? '4': '2' %>
  selector:
    matchLabels:
      run: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        run: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
    spec:
      containers:
      - name: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
        image: chefops/<%= ENV['APP'] %>:<%= ENV['IMAGE_TAG'] %>
        env:
          - name: HAB_LICENSE
            value: accept-no-persist
          - name: REDIS_URL
            valueFrom:
              secretKeyRef:
                name: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] == 'production' ? 'production' : 'nonproduction' %>
                key: redis_url
        ports:
        - containerPort: 8000
          protocol: TCP
        - containerPort: 9631
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        <%- unless ENV['ENVIRONMENT'] == 'production' -%>
        imagePullPolicy: Always
        <%- end -%>
      imagePullSecrets:
      - name: registry-secret
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30

---
apiVersion: autoscaling/v1
kind: HorizontalPodAutoscaler
metadata:
  name: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
  namespace: <%= ENV['APP'] %>
spec:
  maxReplicas: 10
  minReplicas: 2
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] %>
  targetCPUUtilizationPercentage: 80
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: <%= ENV['APP'] %>-poller-<%= ENV['ENVIRONMENT'] %>
  namespace: <%= ENV['APP'] %>
spec:
  schedule: "*/10 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - image: chefops/<%= ENV['APP'] %>:<%= ENV['IMAGE_TAG'] %>
            name: <%= ENV['APP'] %>-poller
            command: ['/bin/sh']
            args: ['-c', 'cd $(hab pkg path chefops/<%= ENV['APP'] %>)/app; bundle exec $(hab pkg path core/ruby)/bin/ruby ./poller 2>&1']
            env:
              - name: HAB_LICENSE
                value: accept-no-persist
              - name: REDIS_URL
                valueFrom:
                  secretKeyRef:
                    name: <%= ENV['APP'] %>-<%= ENV['ENVIRONMENT'] == 'production' ? 'production' : 'nonproduction' %>
                    key: redis_url
          restartPolicy: OnFailure
